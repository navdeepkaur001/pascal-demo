import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { deploy_new_contract } from "../../../CommonServices/Instance.service";
import { testFunction } from "../../../redux/action/admin.action";
import "./Home.scss";
import dynamicJsonAbi from "../../../Abis/DynamicAbi.json";
import escrowJsonAbi from "../../../Abis/scrowAbi.json";

import Web3 from "web3";
import { RPC_URL } from "../../../constant";
import TokenSol from "../../../Abis/dynamic.sol";
import { DYNAMIC_BYTE_CODE } from "../../../ByteCode/dynamicAbiByteCode.js";
import { toast } from "../../../Components/Toast/Toast";
import { CommonService } from "../../../utils/commonService";
import BigNumber from "big-number/big-number";

const Home = () => {
  let dispatch = useDispatch();
  const walletAddress = useSelector((state) =>
    state.connect.metamaskAddress ? state.connect.metamaskAddress : false
  );
  useEffect(() => {
    onInIt();
  }, []);
  const onInIt = async () => {
    let web3 = new Web3(window.ethereum);

    let contractInstance = new web3.eth.Contract(escrowJsonAbi, escrowAddress);

    if (contractInstance.methods) {
      let result = await contractInstance.methods.erc20Address().call();
      setErc20Address(result);
    }
  };

  const [tokenName, setTokenName] = useState();
  const [tokenSymbol, setTokenSymbol] = useState();
  const [tokenDecimal, setTokenDecimal] = useState();
  const [tokenSupply, setTokenSupply] = useState();
  const [pascalTokenAddress, setPascalTokenAddress] = useState();
  const [tokenAmount, setTokenAmount] = useState();
  const [escrowAddress, setEscrowAddress] = useState();
  const [mintToken, setMintToken] = useState();
  const [erc20Address, setErc20Address] = useState(); // address of erc20 token

  // const BYTECODE =
  //   "0x60806040526007805460ff19166001179055600a80546001600160a01b031990811673e380a93db38f46866fdf4ca86005cb51cc25977117909155600b80548216732336dc01dd61e53371c79f88d697efbec2c56b1a179055600c80548216732b3d687a51b6672a2e4ba18916126d1e97636b22179055600d805490911673971ca37088734adeb6580db5a61d753597e2346f179055348015620000a257600080fd5b506040516200120838038062001208833981016040819052620000c591620004ed565b600080546001600160a01b031916331790558251620000ec90600290602086019062000390565b5081516200010290600190602085019062000390565b506003805460ff191660ff83169081179091556200012290600a620005f9565b600581905562000139906509184e72a000620006c2565b6006819055600090620001509061012c906200058d565b9050600061271060065460fa620001689190620006c2565b6200017491906200058d565b600a549091506200018f906001600160a01b031683620001e6565b50600b54620001a8906001600160a01b031683620001e6565b50600c54620001c1906001600160a01b031683620001e6565b50600d54620001da906001600160a01b031682620001e6565b5050505050506200074d565b600081600454620001f8919062000572565b60065410156200020757600080fd5b60075460ff16620002545760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b60448201526064015b60405180910390fd5b8160045462000264919062000572565b600654141562000279576007805460ff191690555b6000546001600160a01b03163314620002d55760405162461bcd60e51b815260206004820152601360248201527f4f6e6c79204f776e65722043616e204d696e740000000000000000000000000060448201526064016200024b565b6001600160a01b03831660009081526008602052604081208054849290620002ff90849062000572565b9250508190555081600460008282546200031a919062000572565b90915550506001600160a01b0383166000908152600860205260409020548211156200034557600080fd5b6040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35060015b92915050565b8280546200039e90620006e4565b90600052602060002090601f016020900481019282620003c257600085556200040d565b82601f10620003dd57805160ff19168380011785556200040d565b828001600101855582156200040d579182015b828111156200040d578251825591602001919060010190620003f0565b506200041b9291506200041f565b5090565b5b808211156200041b576000815560010162000420565b600082601f8301126200044857600080fd5b81516001600160401b038082111562000465576200046562000737565b604051601f8301601f19908116603f0116810190828211818310171562000490576200049062000737565b81604052838152602092508683858801011115620004ad57600080fd5b600091505b83821015620004d15785820183015181830184015290820190620004b2565b83821115620004e35760008385830101525b9695505050505050565b6000806000606084860312156200050357600080fd5b83516001600160401b03808211156200051b57600080fd5b620005298783880162000436565b945060208601519150808211156200054057600080fd5b506200054f8682870162000436565b925050604084015160ff811681146200056757600080fd5b809150509250925092565b6000821982111562000588576200058862000721565b500190565b600082620005ab57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115620005f1578160001904821115620005d557620005d562000721565b80851615620005e357918102915b93841c9390800290620005b5565b509250929050565b60006200060783836200060e565b9392505050565b6000826200061f575060016200038a565b816200062e575060006200038a565b8160018114620006475760028114620006525762000672565b60019150506200038a565b60ff84111562000666576200066662000721565b50506001821b6200038a565b5060208310610133831016604e8410600b841016171562000697575081810a6200038a565b620006a38383620005b0565b8060001904821115620006ba57620006ba62000721565b029392505050565b6000816000190483118215151615620006df57620006df62000721565b500290565b600181811c90821680620006f957607f821691505b602082108114156200071b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610aab806200075d6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a257806395d89b411161007157806395d89b41146102805780639d8a496514610288578063a9059cbb1461029b578063dd62ed3e146102ae578063f2fde38b146102d957600080fd5b806370a0823114610231578063845fd9461461025157806388a8d6021461025a5780638da5cb5b1461026d57600080fd5b806323b872dd116100e957806323b872dd146101c65780632d3e474a146101d9578063313ce567146101ec57806340c10f191461020b57806342966c681461021e57600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd146101845780631a6865021461019b575b600080fd5b6101236102ee565b604051610130919061098a565b60405180910390f35b610174610147366004610947565b3360009081526009602090815260408083206001600160a01b039590951683529390529190912055600190565b6040519015158152602001610130565b61018d60045481565b604051908152602001610130565b600d546101ae906001600160a01b031681565b6040516001600160a01b039091168152602001610130565b6101746101d436600461090b565b61037c565b600b546101ae906001600160a01b031681565b6003546101f99060ff1681565b60405160ff9091168152602001610130565b610174610219366004610947565b610434565b61017461022c366004610971565b6105c0565b61018d61023f3660046108b6565b60086020526000908152604090205481565b61018d60065481565b600c546101ae906001600160a01b031681565b6000546101ae906001600160a01b031681565b61012361066f565b600a546101ae906001600160a01b031681565b6101746102a9366004610947565b61067c565b61018d6102bc3660046108d8565b600960209081526000928352604080842090915290825290205481565b6102ec6102e73660046108b6565b610692565b005b600180546102fb90610a0e565b80601f016020809104026020016040519081016040528092919081815260200182805461032790610a0e565b80156103745780601f1061034957610100808354040283529160200191610374565b820191906000526020600020905b81548152906001019060200180831161035757829003601f168201915b505050505081565b6001600160a01b03831660009081526009602090815260408083203384529091528120548211156103e65760405162461bcd60e51b815260206004820152600f60248201526e20b63637bbb0b731b29032b93937b960891b60448201526064015b60405180910390fd5b6001600160a01b0384166000908152600960209081526040808320338452909152812080548492906104199084906109f7565b9091555061042a9050848484610717565b5060019392505050565b60008160045461044491906109df565b600654101561045257600080fd5b60075460ff166104995760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b60448201526064016103dd565b816004546104a791906109df565b60065414156104bb576007805460ff191690555b6000546001600160a01b0316331461050b5760405162461bcd60e51b815260206004820152601360248201527213db9b1e4813dddb995c8810d85b88135a5b9d606a1b60448201526064016103dd565b6001600160a01b038316600090815260086020526040812080548492906105339084906109df565b92505081905550816004600082825461054c91906109df565b90915550506001600160a01b03831660009081526008602052604090205482111561057657600080fd5b6040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b336000908152600860205260408120548211156105dc57600080fd5b33600090815260086020526040812080548492906105fb9084906109f7565b92505081905550816006600082825461061491906109f7565b92505081905550816004600082825461062d91906109f7565b909155505060405182815233907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a2506001919050565b600280546102fb90610a0e565b6000610689338484610717565b50600192915050565b6000546001600160a01b031633146106a957600080fd5b6001600160a01b0381166106bc57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03821661072a57600080fd5b6001600160a01b03831660009081526008602052604090205481111561074f57600080fd5b6001600160a01b03821660009081526008602052604090205461077282826109df565b101561077d57600080fd5b6001600160a01b0380831660009081526008602052604080822054928616825281205490916107ab916109df565b6001600160a01b0385166000908152600860205260408120805492935084929091906107d89084906109f7565b90915550506001600160a01b038316600090815260086020526040812080548492906108059084906109df565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161085191815260200190565b60405180910390a36001600160a01b038084166000908152600860205260408082205492871682529020548291610887916109df565b1461089457610894610a49565b50505050565b80356001600160a01b03811681146108b157600080fd5b919050565b6000602082840312156108c857600080fd5b6108d18261089a565b9392505050565b600080604083850312156108eb57600080fd5b6108f48361089a565b91506109026020840161089a565b90509250929050565b60008060006060848603121561092057600080fd5b6109298461089a565b92506109376020850161089a565b9150604084013590509250925092565b6000806040838503121561095a57600080fd5b6109638361089a565b946020939093013593505050565b60006020828403121561098357600080fd5b5035919050565b600060208083528351808285015260005b818110156109b75785810183015185820160400152820161099b565b818111156109c9576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156109f2576109f2610a5f565b500190565b600082821015610a0957610a09610a5f565b500390565b600181811c90821680610a2257607f821691505b60208210811415610a4357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fdfea26469706673582212203385718beba84b9239f5110fb767ef00bf80de5178f6f9b73bf3a6a84594d24264736f6c63430008050033";
  const BYTECODE =
    "0x60806040523480156200001157600080fd5b5060405162001d4338038062001d4383398101604081905262000034916200016c565b848484846040516200004690620000cd565b6200005594939291906200024a565b604051809103906000f08015801562000072573d6000803e3d6000fd5b50600380546001600160a01b039283166001600160a01b0319918216811790925560008054821690921790915560018054939092169216919091178155600280546001600160801b031916909117905550620002d392505050565b610eca8062000e7983390190565b600082601f830112620000ed57600080fd5b81516001600160401b03808211156200010a576200010a620002bd565b604051601f8301601f19908116603f01168101908282118183101715620001355762000135620002bd565b816040528381528660208588010111156200014f57600080fd5b620001628460208301602089016200028a565b9695505050505050565b600080600080600060a086880312156200018557600080fd5b85516001600160401b03808211156200019d57600080fd5b620001ab89838a01620000db565b96506020880151915080821115620001c257600080fd5b50620001d188828901620000db565b945050604086015160ff81168114620001e957600080fd5b6060870151608088015191945092506001600160a01b03811681146200020e57600080fd5b809150509295509295909350565b60008151808452620002368160208601602086016200028a565b601f01601f19169290920160200192915050565b6080815260006200025f60808301876200021c565b82810360208401526200027381876200021c565b60ff95909516604084015250506060015292915050565b60005b83811015620002a75781810151838201526020016200028d565b83811115620002b7576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b610b9680620002e36000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806369d3e20e1161005b57806369d3e20e146100da5780636d6a378e146100ed578063785e9e8614610118578063a035b1fe1461012b57600080fd5b80630ced5b0214610082578063276184ae1461009757806347c3e4dc146100c7575b600080fd5b610095610090366004610957565b61013e565b005b6000546100aa906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100aa906001600160a01b031681565b6100956100e8366004610957565b610470565b6101006100fb366004610957565b610555565b6040516001600160801b0390911681526020016100be565b6003546100aa906001600160a01b031681565b600254610100906001600160801b031681565b6000816001600160801b0316116101a65760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206e6565647320746f2062652067726561746572207468616e206044820152600360fc1b60648201526084015b60405180910390fd5b6001546040516370a0823160e01b81523360048201526001600160801b038316916001600160a01b0316906370a082319060240160206040518083038186803b1580156101f257600080fd5b505afa158015610206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022a9190610980565b10156102715760405162461bcd60e51b8152602060048201526016602482015275596f75722050542062616c616e6365206973206c6f7760501b604482015260640161019d565b600154604051636eb1769f60e11b81523360048201523060248201526001600160801b038316916001600160a01b03169063dd62ed3e9060440160206040518083038186803b1580156102c357600080fd5b505afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610980565b10156103495760405162461bcd60e51b815260206004820152601860248201527f596f757220505420616c6c6f77616e6365206973206c6f770000000000000000604482015260640161019d565b600061035482610555565b6000546040516370a0823160e01b81523060048201529192506001600160801b038316916001600160a01b03909116906370a082319060240160206040518083038186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd9190610980565b101561042b5760405162461bcd60e51b815260206004820152601760248201527f436f6e74726163742062616c616e6365206973206c6f77000000000000000000604482015260640161019d565b60015461044c906001600160a01b031633306001600160801b0386166106bf565b60005461046c906001600160a01b0316336001600160801b0384166107fd565b5050565b6000816001600160801b0316116104c95760405162461bcd60e51b815260206004820152601960248201527f416d6f756e742073686f756c64206e6f74206265207a65726f00000000000000604482015260640161019d565b6003546040516340c10f1960e01b81523060048201526001600160801b03831660248201526001600160a01b03909116906340c10f1990604401602060405180830381600087803b15801561051d57600080fd5b505af1158015610531573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046c919061092e565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a657600080fd5b505afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190610999565b6105e990600a610a6e565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190610999565b61067d90600a610a6e565b6002549091506106979083906001600160801b0316610b1b565b816106a386600a610b1b565b6106ad9190610b1b565b6106b791906109f7565b949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161072391906109bc565b6000604051808303816000865af19150503d8060008114610760576040519150601f19603f3d011682016040523d82523d6000602084013e610765565b606091505b509150915081801561078f57508051158061078f57508080602001905181019061078f919061092e565b6107f55760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b606482015260840161019d565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161085991906109bc565b6000604051808303816000865af19150503d8060008114610896576040519150601f19603f3d011682016040523d82523d6000602084013e61089b565b606091505b50915091508180156108c55750805115806108c55750808060200190518101906108c5919061092e565b6109275760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b606482015260840161019d565b5050505050565b60006020828403121561094057600080fd5b8151801515811461095057600080fd5b9392505050565b60006020828403121561096957600080fd5b81356001600160801b038116811461095057600080fd5b60006020828403121561099257600080fd5b5051919050565b6000602082840312156109ab57600080fd5b815160ff8116811461095057600080fd5b6000825160005b818110156109dd57602081860181015185830152016109c3565b818111156109ec576000828501525b509190910192915050565b60006001600160801b0380841680610a1f57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600181815b80851115610a66578160001904821115610a4c57610a4c610b4a565b80851615610a5957918102915b93841c9390800290610a30565b509250929050565b600061095060ff841683600082610a8757506001610b15565b81610a9457506000610b15565b8160018114610aaa5760028114610ab457610ad0565b6001915050610b15565b60ff841115610ac557610ac5610b4a565b50506001821b610b15565b5060208310610133831016604e8410600b8410161715610af3575081810a610b15565b610afd8383610a2b565b8060001904821115610b1157610b11610b4a565b0290505b92915050565b60006001600160801b0380831681851681830481118215151615610b4157610b41610b4a565b02949350505050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212206dc495d9343df1c06077518536700b56a4446c1a4a8eacd6fd44adb87457c7ac64736f6c6343000805003360806040526007805460ff191660011790553480156200001e57600080fd5b5060405162000eca38038062000eca83398101604081905262000041916200021a565b600080546001600160a01b03191633179055835162000068906002906020870190620000bd565b5082516200007e906001906020860190620000bd565b506003805460ff191660ff84169081179091556200009e90600a620002ee565b6005819055620000af9082620003b9565b600655506200044492505050565b828054620000cb90620003db565b90600052602060002090601f016020900481019282620000ef57600085556200013a565b82601f106200010a57805160ff19168380011785556200013a565b828001600101855582156200013a579182015b828111156200013a5782518255916020019190600101906200011d565b50620001489291506200014c565b5090565b5b808211156200014857600081556001016200014d565b600082601f8301126200017557600080fd5b81516001600160401b03808211156200019257620001926200042e565b604051601f8301601f19908116603f01168101908282118183101715620001bd57620001bd6200042e565b81604052838152602092508683858801011115620001da57600080fd5b600091505b83821015620001fe5785820183015181830184015290820190620001df565b83821115620002105760008385830101525b9695505050505050565b600080600080608085870312156200023157600080fd5b84516001600160401b03808211156200024957600080fd5b620002578883890162000163565b955060208701519150808211156200026e57600080fd5b506200027d8782880162000163565b935050604085015160ff811681146200029557600080fd5b6060959095015193969295505050565b600181815b80851115620002e6578160001904821115620002ca57620002ca62000418565b80851615620002d857918102915b93841c9390800290620002aa565b509250929050565b6000620002fc838362000303565b9392505050565b6000826200031457506001620003b3565b816200032357506000620003b3565b81600181146200033c5760028114620003475762000367565b6001915050620003b3565b60ff8411156200035b576200035b62000418565b50506001821b620003b3565b5060208310610133831016604e8410600b84101617156200038c575081810a620003b3565b620003988383620002a5565b8060001904821115620003af57620003af62000418565b0290505b92915050565b6000816000190483118215151615620003d657620003d662000418565b500290565b600181811c90821680620003f057607f821691505b602082108114156200041257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610a7680620004546000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a9059cbb11610066578063a9059cbb1461021a578063ca69e3231461022d578063dd62ed3e14610236578063f2fde38b1461026157600080fd5b806370a08231146101c75780638da5cb5b146101e757806395d89b411461021257600080fd5b806323b872dd116100c857806323b872dd1461016f578063313ce5671461018257806340c10f19146101a157806342966c68146101b457600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610158575b600080fd5b6100f7610276565b6040516101049190610955565b60405180910390f35b61014861011b366004610912565b3360009081526009602090815260408083206001600160a01b039590951683529390529190912055600190565b6040519015158152602001610104565b61016160045481565b604051908152602001610104565b61014861017d3660046108d6565b610304565b60035461018f9060ff1681565b60405160ff9091168152602001610104565b6101486101af366004610912565b6103bc565b6101486101c236600461093c565b610548565b6101616101d5366004610881565b60086020526000908152604090205481565b6000546101fa906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b6100f76105f7565b610148610228366004610912565b610604565b61016160065481565b6101616102443660046108a3565b600960209081526000928352604080842090915290825290205481565b61027461026f366004610881565b61061a565b005b60018054610283906109d9565b80601f01602080910402602001604051908101604052809291908181526020018280546102af906109d9565b80156102fc5780601f106102d1576101008083540402835291602001916102fc565b820191906000526020600020905b8154815290600101906020018083116102df57829003601f168201915b505050505081565b6001600160a01b038316600090815260096020908152604080832033845290915281205482111561036e5760405162461bcd60e51b815260206004820152600f60248201526e20b63637bbb0b731b29032b93937b960891b60448201526064015b60405180910390fd5b6001600160a01b0384166000908152600960209081526040808320338452909152812080548492906103a19084906109c2565b909155506103b290508484846106e2565b5060019392505050565b6000816004546103cc91906109aa565b60065410156103da57600080fd5b60075460ff166104215760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606401610365565b8160045461042f91906109aa565b6006541415610443576007805460ff191690555b6000546001600160a01b031633146104935760405162461bcd60e51b815260206004820152601360248201527213db9b1e4813dddb995c8810d85b88135a5b9d606a1b6044820152606401610365565b6001600160a01b038316600090815260086020526040812080548492906104bb9084906109aa565b9250508190555081600460008282546104d491906109aa565b90915550506001600160a01b0383166000908152600860205260409020548211156104fe57600080fd5b6040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b3360009081526008602052604081205482111561056457600080fd5b33600090815260086020526040812080548492906105839084906109c2565b92505081905550816006600082825461059c91906109c2565b9250508190555081600460008282546105b591906109c2565b909155505060405182815233907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a2506001919050565b60028054610283906109d9565b60006106113384846106e2565b50600192915050565b6000546001600160a01b031633146106745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610365565b6001600160a01b03811661068757600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166106f557600080fd5b6001600160a01b03831660009081526008602052604090205481111561071a57600080fd5b6001600160a01b03821660009081526008602052604090205461073d82826109aa565b101561074857600080fd5b6001600160a01b038083166000908152600860205260408082205492861682528120549091610776916109aa565b6001600160a01b0385166000908152600860205260408120805492935084929091906107a39084906109c2565b90915550506001600160a01b038316600090815260086020526040812080548492906107d09084906109aa565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161081c91815260200190565b60405180910390a36001600160a01b038084166000908152600860205260408082205492871682529020548291610852916109aa565b1461085f5761085f610a14565b50505050565b80356001600160a01b038116811461087c57600080fd5b919050565b60006020828403121561089357600080fd5b61089c82610865565b9392505050565b600080604083850312156108b657600080fd5b6108bf83610865565b91506108cd60208401610865565b90509250929050565b6000806000606084860312156108eb57600080fd5b6108f484610865565b925061090260208501610865565b9150604084013590509250925092565b6000806040838503121561092557600080fd5b61092e83610865565b946020939093013593505050565b60006020828403121561094e57600080fd5b5035919050565b600060208083528351808285015260005b8181101561098257858101830151858201604001528201610966565b81811115610994576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156109bd576109bd610a2a565b500190565b6000828210156109d4576109d4610a2a565b500390565b600181811c908216806109ed57607f821691505b60208210811415610a0e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fdfea26469706673582212206f04eb9e7e251692b4b3579864e9330fdb1c0ac2ef84e60e28a3845fb5aae31164736f6c63430008050033";

  const deployToken = async () => {
    let web3 = new Web3(window.ethereum);
    let deploy_contract = new web3.eth.Contract(escrowJsonAbi);

    let account = walletAddress;

    let payload = {
      data: BYTECODE,
      arguments: [
        tokenSymbol,
        tokenName,
        tokenDecimal,
        tokenSupply,
        pascalTokenAddress,
      ],
    };
    let parameter = {
      from: account,
      gasLimit: 3000000,
    };
    // Function Call

    deploy_contract
      .deploy(payload)
      .send(parameter, (err, transactionHash) => {
        console.log("Transaction Hash :", transactionHash);
      })
      .on("confirmation", () => {})
      .then((newContractInstance) => {
        console.log(
          "Deployed Contract Address : ",
          newContractInstance.options.address
        );
        setEscrowAddress(newContractInstance.options.address);
        toast.success("Contract deployed successfully");
      });
  };
  const mintTokenHandler = async () => {
    let x = "0x19d54417bDeD086F0422B4e80894B4c2153fB41f";
    setEscrowAddress(x);
    // if (!escrowAddress) {
    //   return toast.error("Escrow Address not found.");
    // }
    let web3 = new Web3(window.ethereum);

    let contractInstance = new web3.eth.Contract(escrowJsonAbi, escrowAddress);

    if (contractInstance.methods) {
      let result = await contractInstance.methods.erc20Address().call();
      setErc20Address(result);
      let dynamicContractInstance = new web3.eth.Contract(
        dynamicJsonAbi,
        result
      );
      let decimal = await dynamicContractInstance.methods.decimals().call();

      let calculatedValue = CommonService.convertWithDecimal(
        mintToken,
        10 ** decimal
      );

      await contractInstance.methods
        .mint(calculatedValue)
        .send({ from: walletAddress, gas: 210000 })
        .on("confirmation", () => {})
        .then((response) => toast.success("Token minted successfully."));
    } else {
      toast.error("Error while creating escrow instance:-", contractInstance);
    }
  };

  const buyTokenHandler = async () => {
    let x = "0x19d54417bDeD086F0422B4e80894B4c2153fB41f";
    setEscrowAddress(x);
    // if (!escrowAddress) {
    //   return toast.error("Escrow Address not found.");
    // }

    let web3 = new Web3(window.ethereum);

    // check allowance  and approval functionality using instace of pascal address with dynamic abi
    let pascalDynamicInstance = new web3.eth.Contract(
      dynamicJsonAbi,
      "0xf296b58da510e8226ab6f63c6924603f6ee247f5"
    );

    let pascaldecimal = await pascalDynamicInstance.methods.decimals().call();

    let allowance = await pascalDynamicInstance.methods
      .allowance(walletAddress, escrowAddress)
      .call();
    console.log("allowance", allowance);
    if (Number(allowance) <= 0) {
      let maxlimit, limit, approval;
      maxlimit = BigNumber(10).power(40);
      limit = maxlimit.toString();
      await pascalDynamicInstance.methods
        .approve(escrowAddress, limit)
        .send({ from: walletAddress, gas: 210000 })
        .on("confirmation", () => {});
    }

    let escrowContractInstance = new web3.eth.Contract(
      escrowJsonAbi,
      escrowAddress
    );
    let calculatedAmount = CommonService.convertWithDecimal(
      tokenAmount,
      10 ** pascaldecimal
    );
    if (escrowContractInstance.methods) {
      await escrowContractInstance.methods
        .buyTokens(calculatedAmount)
        .send({ from: walletAddress, gas: 210000 })
        .on("confirmation", () => {})
        .then(() => {
          toast.success("Token purchased successfully");
        });
    } else {
      toast.error(
        "Error while creating escrow instance:-",
        escrowContractInstance
      );
    }
  };
  return (
    <>
      <div className="outerDiv">
        <form>
          <input
            type="text"
            placeholder="Enter Token name"
            value={tokenName}
            onChange={(e) => setTokenName(e.target.value)}
          />
          <br />
          <input
            type="text"
            placeholder="Enter Token Symbol"
            value={tokenSymbol}
            onChange={(e) => setTokenSymbol(e.target.value)}
          />
          <br />
          <input
            type="text"
            placeholder="Enter Token Decimal"
            value={tokenDecimal}
            onChange={(e) => setTokenDecimal(e.target.value)}
          />
          <br />
          <input
            type="text"
            placeholder="Enter Token supply"
            value={tokenSupply}
            onChange={(e) => setTokenSupply(e.target.value)}
          />
          <br />
          <input
            type="text"
            placeholder="Enter pascal token address"
            value={pascalTokenAddress}
            onChange={(e) => setPascalTokenAddress(e.target.value)}
          />
          <br />
          <button type="button" onClick={() => deployToken()}>
            {" "}
            Submit
          </button>
          <br />
          Escrow contract address is :- {escrowAddress}
          <br />
          Erc20erc contract address is :- {erc20Address}
          <br />
          <br />
          <input
            type="text"
            placeholder="Enter mint token"
            value={mintToken}
            onChange={(e) => setMintToken(e.target.value)}
          ></input>{" "}
          <br />
          <br />
          <button type="button" onClick={() => mintTokenHandler()}>
            {" "}
            Mint
          </button>
          <br />
          <br />
          <input
            type="text"
            placeholder="Enter amount"
            value={tokenAmount}
            onChange={(e) => setTokenAmount(e.target.value)}
          ></input>{" "}
          <br />
          <br />
          <button type="button" onClick={() => buyTokenHandler()}>
            {" "}
            Buy token
          </button>
        </form>
      </div>
    </>
  );
};

export default Home;
